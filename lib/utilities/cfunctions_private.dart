//  @param l - int string-length
//  @param f - Function() that generates the characters of String s
//  @param g - Function({ required String s, int? n, }) that modifies String s generated by Function() f
String cFuncGenerateString({
  required int n,
  required String g({
    required String s,
    int? n,
  }),
  required String f(),
}) {
  String s = '';
  for (int i = 0; i < n; i++) s += f();
  return g(s: s);
}

// //  @param s - String where substring() is applied
// //  @param n - int string-length prior to application of substring()
// String cFuncSubstring({
//   required String s,
//   int? n,
// }) {
//   if (n == null) n = CustomKeyMethods.standardLength;
//   assert(s.length == n, 'String Length Didn\'t Match');
//   return s.substring(0, 4) + '-' + s.substring(4, 8) + '-' + s.substring(8);
// }

// String cFuncSubstringEight({
//   required String s,
//   int? n,
// }) {
//   assert(s.length == 8, 'String Length Didn\'t Match');
//   return s.substring(0, 4) + '-' + s.substring(4);
// }

// String cFuncSubstringSixteen({
//   required String s,
//   int? n,
// }) {
//   assert(s.length == 16, 'String Length Didn\'t Match');
//   return s.substring(0, 4) +
//       '-' +
//       s.substring(4, 8) +
//       '-' +
//       s.substring(8, 12) +
//       '-' +
//       s.substring(12);
// }

// Map<CustomKey, Object> cFuncCustomMap(
//   List<Map<String, Object?>> l,
//   MapEntry<CustomKey, Object> f(
//     Map<String, Object?> json,
//   ),
// ) {
//   Map<CustomKey, Object> _customMap = {};
//   for (int i = 0; i < l.length; i++) {
//     _customMap.addEntries(
//       {
//         f(
//           l[i],
//         ),
//       },
//     );
//   }
//   return _customMap;
// }

// List<String> cFuncGetKeyStrings(Map<CustomKey, Object> customMap) {
//   List<String> _keyStrings = [];
//   customMap.forEach(
//     (key, value) {
//       _keyStrings.add(key.key);
//     },
//   );
//   return _keyStrings;
// }

// bool cFuncContainsString({
//   required List<String> l,
//   required String s,
// }) {
//   bool _contains = false;
//   for (int i = 0; i < l.length; i++) {
//     _contains = l[i].contains(s);
//     if (_contains) return _contains;
//   }
//   return _contains;
// }

// //  @param b - DateTime base date
// //  @param d - DateTime object date
// //  @param f - Frequency: Weekly, Monthly, AllTime
// bool cFuncObjectIsAfterDate({
//   DateTime? b,
//   required DateTime d,
//   required Frequency f,
// }) {
//   if (b == null) b = DateTime.now();
//   if (f == Frequency.Daily)
//     return d.isAfter(
//       b.subtract(
//         const Duration(days: 1),
//       ),
//     );
//   if (f == Frequency.Weekly)
//     return d.isAfter(
//       b.subtract(
//         const Duration(days: 7),
//       ),
//     );
//   if (f == Frequency.Monthly)
//     return d.isAfter(
//       b.subtract(
//         const Duration(days: 30),
//       ),
//     );
//   return true;
// }
